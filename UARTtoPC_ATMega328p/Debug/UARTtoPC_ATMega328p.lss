
UARTtoPC_ATMega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c6  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000029  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	unsigned int baudrate = 3;						// 230400 Baud
	// unsigned char data[] = "Sent from ATMega328P  ";
	
	DDRB = 0b11111101;								// Set pin PB1 as input and the rest as outputs
  80:	8d ef       	ldi	r24, 0xFD	; 253
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;								//
  84:	15 b8       	out	0x05, r1	; 5
	DDRC = 0b00000000;
  86:	17 b8       	out	0x07, r1	; 7
	
	// Set Baud rate
	UBRR0H = (baudrate>>8);
  88:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baudrate);
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0C = 0x06;
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = (1<<TXEN0);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// ADC
	ADMUX = 0b01100000;								// ADC Channel 0. ADLAR = 1. AVCC as reference
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b10000111;							// ?
  a4:	87 e8       	ldi	r24, 0x87	; 135
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	while (1)
	{
		// ADC
		ADCSRA |= (1 << ADSC);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
		while(ADCSRA & (1 << ADSC));
  b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b8:	86 fd       	sbrc	r24, 6
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <main+0x34>
		
		uint8_t ADCdata = ADCH;						// Move ADC data into a variable, necessary?
  bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		do{
			while (!( UCSR0A & (1<<UDRE0)));		// Waits for the buffer to be empty
  c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	85 ff       	sbrs	r24, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <main+0x40>
			UDR0 = ((ADCdata % 10) + 48);			// Sends over UART. Can things be processed meanwhile? - REVERSE ORDER
  c8:	8d ec       	ldi	r24, 0xCD	; 205
  ca:	98 9f       	mul	r25, r24
  cc:	81 2d       	mov	r24, r1
  ce:	11 24       	eor	r1, r1
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
  d6:	38 2f       	mov	r19, r24
  d8:	33 0f       	add	r19, r19
  da:	23 2f       	mov	r18, r19
  dc:	22 0f       	add	r18, r18
  de:	22 0f       	add	r18, r18
  e0:	23 0f       	add	r18, r19
  e2:	92 1b       	sub	r25, r18
  e4:	90 5d       	subi	r25, 0xD0	; 208
  e6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			ADCdata /= 10;
  ea:	98 2f       	mov	r25, r24
		}while(ADCdata != 0);						// While not 0/there are numbers left to send
  ec:	81 11       	cpse	r24, r1
  ee:	e8 cf       	rjmp	.-48     	; 0xc0 <main+0x40>
		// SERIAL FORMATTING
		// Send line end and carriage return for better formatting
		while (!( UCSR0A & (1<<UDRE0)));
  f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f4:	85 ff       	sbrs	r24, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <main+0x70>
		UDR0 = '\n';
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while (!( UCSR0A & (1<<UDRE0)));
  fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 102:	85 ff       	sbrs	r24, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <main+0x7e>
		UDR0 = '\r';
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	80 e7       	ldi	r24, 0x70	; 112
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x92>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9c>
 11c:	00 00       	nop
 11e:	c5 cf       	rjmp	.-118    	; 0xaa <main+0x2a>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
